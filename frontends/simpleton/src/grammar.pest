file              =  { SOI ~ (shebang)? ~ ows ~ module ~ ows ~ EOI }
shebang           = _{ "#!" ~ (!NEWLINE ~ ANY)* ~ NEWLINE+ }
module            =  { "mod" ~ mws ~ identifier ~ ows ~ "{" ~ (ows ~ module_item)* ~ ows ~ "}" }
module_item       =  { import | structure | function }
import            =  { "import" ~ mws ~ text ~ ows ~ ";" }
structure         =  { "struct" ~ mws ~ identifier ~ ows ~ "{" ~ ows ~ (structure_field ~ ows ~ ("," ~ ows ~ structure_field)* ~ ows ~ ("," ~ ows)?)? ~ "}" }
structure_field   =  { identifier }
function          =  { "func" ~ mws ~ identifier ~ ows ~ "(" ~ ows ~ (function_argument ~ ows ~ ("," ~ ows ~ function_argument)* ~ ows ~ ("," ~ ows)?)? ~ ")" ~ ows ~ "{" ~ (ows ~ statements)? ~ ows ~ "}" }
function_argument =  { identifier }
statements        = _{ (statement ~ ows)* ~ statement }
statement         =  { return_value | create_variable | if_else | while_loop | for_loop | assign_value | expression }
create_variable   =  { "var" ~ mws ~ identifier ~ ows ~ "=" ~ ows ~ expression_start ~ ows ~ ";" }
assign_value      =  { expression_start ~ ows ~ "=" ~ ows ~ expression_start ~ ows ~ ";" }
expression        =  { expression_start ~ ows ~ ";" }
return_value      =  { "return" ~ mws ~ expression_start ~ ows ~ ";" }
if_else           =  { "if" ~ mws ~ expression_start ~ ows ~ "{" ~ (ows ~ if_else_success)? ~ ows ~ "}" ~ (ows ~ "else" ~ ows ~ "{" ~ (ows ~ if_else_failure)? ~ ows ~ "}")? }
if_else_success   =  { statements }
if_else_failure   =  { statements }
while_loop        =  { "while" ~ mws ~ expression_start ~ ows ~ "{" ~ (ows ~ statements)? ~ ows ~ "}" }
for_loop          =  { "for" ~ mws ~ identifier ~ mws ~ "in" ~ mws ~ expression_start ~ ows ~ "{" ~ (ows ~ statements)? ~ ows ~ "}" }
expression_start  =  { find_structure | find_function | closure | call_function | literal | get_variable }
find_structure    =  { "<" ~ ows ~ "struct" ~ mws ~ path ~ ows ~ ">" ~ (ows ~ expression_next)? }
find_function     =  { "<" ~ ows ~ "func" ~ mws ~ path ~ ows ~ ">" ~ (ows ~ expression_next)? }
closure           =  { "@" ~ ows ~ "[" ~ ows ~ (closure_capture ~ ows ~ ("," ~ ows ~ closure_capture)* ~ ows ~ ("," ~ ows)?)? ~ "]" ~ ows ~ "(" ~ ows ~ (function_argument ~ ows ~ ("," ~ ows ~ function_argument)* ~ ows ~ ("," ~ ows)?)? ~ ")" ~ ows ~ "{" ~ (ows ~ statements)? ~ ows ~ "}" ~ (ows ~ expression_next)? }
closure_capture   =  { identifier }
get_variable      =  { identifier ~ (ows ~ expression_next)? }
call_function     =  { path ~ ows ~ "(" ~ ows ~ (call_argument ~ ows ~ ("," ~ ows ~ call_argument)* ~ ows ~ ("," ~ ows)?)? ~ ")" ~ (ows ~ expression_next)? }
call_argument     =  { expression_start }
expression_next   =  { get_field | get_array_item | get_map_item }
get_field         =  { "." ~ ows ~ identifier ~ (ows ~ expression_next)? }
get_array_item    =  { "[" ~ ows ~ expression_start ~ ows ~ "]" ~ (ows ~ expression_next)? }
get_map_item      =  { "{" ~ ows ~ expression_start ~ ows ~ "}" ~ (ows ~ expression_next)? }
literal           =  { (null | bool_true | bool_false | hex | binary | array | map | object | text | real | integer) ~ (ows ~ expression_next)? }
array             =  { "[" ~ ows ~ (expression_start ~ ows ~ ("," ~ ows ~ expression_start)* ~ ows ~ ("," ~ ows)?)? ~ "]" }
map               =  { "{" ~ ows ~ (map_item ~ ows ~ ("," ~ ows ~ map_item)* ~ ows ~ ("," ~ ows)?)? ~ "}" }
map_item          =  { identifier ~ (ows ~ ":" ~ ows ~ expression_start)? }
object            =  { path ~ ows ~ "{" ~ ows ~ (object_item ~ ows ~ ("," ~ ows ~ object_item)* ~ ows ~ ("," ~ ows)?)? ~ "}" }
object_item       =  { identifier ~ (ows ~ ":" ~ ows ~ expression_start)? }
null              =  { "null" }
bool_true         =  { "true" }
bool_false        =  { "false" }
hex               = _{ "#" ~ hex_inner }
hex_inner         =  { (ASCII_HEX_DIGIT{2})+ }
binary            = _{ "$" ~ binary_inner }
binary_inner      =  { ASCII_BIN_DIGIT+ }
integer           = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
real              = @{ ("+" | "-")? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
text              =  { "\"" ~ text_inner ~ "\"" }
text_inner        = @{ text_char* }
text_char         =  { !("\"" | "\\") ~ ANY | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t") | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4}) }
COMMENT           = _{ comment_block | comment_line }
comment_block     = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
comment_line      = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE+ }
path              =  { identifier ~ ows ~ "::" ~ ows ~ identifier }
identifier        = @{ XID_START ~ XID_CONTINUE* }
ws                = _{ " " | "\t" | "\r" | "\n" }
mws               = _{ ws+ }
ows               = _{ ws* }
