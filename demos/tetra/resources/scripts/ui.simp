mod ui {
    struct UI {
        style,
        input_action,
        input_context,
        input_text,
    }

    func new(style) {
        return ui::UI {
            style,
            input_action: false,
            input_context: false,
            input_text: "",
        };
    }

    func draw(ui, story, engine) {
        var gui = gui::screen(engine);
        
        if reflect::is_valid(story.dialogue) {
            gui::cut_bottom(gui, 200.0, @[ui, story, engine](gui) {
                if reflect::is_valid(story.dialogue.character) {
                    ui::dialogue_panel_accented(ui, story, engine, gui);
                } else {
                    ui::dialogue_panel(ui, story, engine, gui);
                }
            });
        }

        if reflect::is_valid(story.state) {
            if reflect::is_valid(story.state.wait) {
                var type = reflect::type_of(story.state.wait);
                if reflect::are_same(type, <struct action::WaitForOption>) {
                    ui::options(ui, story, engine, gui);
                }
            }
        }
    }

    func options(ui, story, engine, gui) {
        gui::margin(gui, 128.0, 128.0, 32.0, 232.0, @[ui, story, engine](gui) {
            gui::vertical_list(
                gui,
                story.state.wait.options,
                64.0,
                6.0,
                0.0,
                @[ui, story, engine](gui, text) {
                    ui::option(ui, text, story, engine, gui);
                },
            );
        });
    }

    func option(ui, option, story, engine, gui) {
        ui::button_action(ui, engine, gui, @[story, option]() {
            if reflect::is_valid(story.state) {
                if reflect::is_valid(story.state.wait) {
                    var type = reflect::type_of(story.state.wait);
                    if reflect::are_same(type, <struct action::WaitForOption>) {
                        story.state.wait = null;
                        if reflect::is_valid(option.label) {
                            action::execute_jump_to_label(
                                action::JumpToLabel {
                                    name: option.label,
                                },
                                story,
                            );
                        }
                    }
                }
            }
        });

        gui::image(
            engine,
            gui,
            ui.style{"panel_accented"},
            color::white(),
            gui::NineSlice {
                left: 10.0,
                right: 10.0,
                top: 0.0,
            },
        );
        gui::margin(gui, 32.0, 32.0, 16.0, 16.0, @[ui, story, engine, option](gui) {
            gui::text(
                engine,
                gui,
                ui.style{"font"},
                color::white(),
                vec2::Vec2 { x: 0.5, y: 0.5 },
                option.text,
            );
        });
    }

    func dialogue_panel(ui, story, engine, gui) {
        ui::dialogue_panel_content(ui, story, engine, gui, "panel");
    }

    func dialogue_panel_accented(ui, story, engine, gui) {
        gui::margin(gui, 32.0, 32.0, 0.0, 16.0, @[ui, story, engine](gui) {
            ui::dialogue_panel_content(ui, story, engine, gui, "panel_accented");
        });
    }

    func dialogue_panel_content(ui, story, engine, gui, panel_style) {
        ui::button_action(ui, engine, gui, @[story]() {
            if reflect::is_valid(story.state) {
                if reflect::is_valid(story.state.wait) {
                    var type = reflect::type_of(story.state.wait);
                    if reflect::are_same(type, <struct action::WaitForContinue>) {
                        story.state.wait = null;
                    }
                }
            }
        });

        gui::image(
            engine,
            gui,
            ui.style{panel_style},
            color::white(),
            gui::NineSlice {
                left: 10.0,
                right: 10.0,
                top: 0.0,
            },
        );
        gui::margin(gui, 32.0, 32.0, 16.0, 16.0, @[ui, story, engine](gui) {
            gui::text(
                engine,
                gui,
                ui.style{"font"},
                color::white(),
                vec2::Vec2 { x: 0.0, y: 0.0 },
                story.dialogue.text,
            );
        });
    }
    
    func button_action(ui, engine, gui, executor) {
        if math::and(ui.input_action, gui::hover(engine, gui)) {
            ui.input_action = false;
            var type = reflect::type_of(executor);
            if reflect::are_same(type, <struct closure::Closure>) {
                closure::call(executor, []);
            }
            if reflect::are_same(type, <struct reflect::Function>) {
                reflect::call(executor, []);
            }
            if reflect::are_same(type, <struct event::Event>) {
                event::dispatch(executor, []);
            }
            if reflect::are_same(type, <struct promise::Promise>) {
                promise::resolve(executor, null);
            }
            return true;
        }
        return false;
    }
}