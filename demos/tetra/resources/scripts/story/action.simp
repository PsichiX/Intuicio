mod action {
    struct Action { type, properties }

    struct Label { name }

    struct JumpToLabel { name }

    struct JumpToChapter { name }

    struct ChangeBackground { asset }

    struct ShowCharacter { id, variant, position }

    struct HideCharacter { id }

    struct ShowMessage { text, character, options }

    struct HideMessage {}

    struct WaitForContinue {}

    struct WaitForOption { options }

    struct WaitInTime { seconds }

    func new(data) {
        var action = action::Action {};
        reflect::pack(action, data);
        var type = reflect::find_type_by_name(action.type, "action");
        return reflect::new(type, action.properties);
    }

    func execute(action, story, engine) {
        console::log_line(
            text::combine(
                "* Execute action: ",
                debug::debug(action, true),
            ),
        );
        var type = reflect::type_of(action);
        if reflect::are_same(type, <struct action::Label>) {
            return null;
        }
        if reflect::are_same(type, <struct action::JumpToLabel>) {
            return action::execute_jump_to_label(action, story);
        }
        if reflect::are_same(type, <struct action::JumpToChapter>) {
            return action::execute_jump_to_chapter(action, story);
        }
        if reflect::are_same(type, <struct action::ChangeBackground>) {
            return action::execute_change_background(action, story, engine);
        }
        if reflect::are_same(type, <struct action::ShowCharacter>) {
            return action::execute_show_character(action, story);
        }
        if reflect::are_same(type, <struct action::HideCharacter>) {
            return action::execute_hide_character(action, story);
        }
        if reflect::are_same(type, <struct action::ShowMessage>) {
            return action::execute_show_message(action, story);
        }
        if reflect::are_same(type, <struct action::HideMessage>) {
            return action::execute_hide_message(action, story);
        }
    }

    func execute_jump_to_label(action, story) {
        var index = iter::position(
            array::iter(story.chapters{story.state.chapter}.actions, false),
            @[action](item) {
                if reflect::are_same(reflect::type_of(item), <struct action::Label>) {
                    return text::equals(item.name, action.name);
                }
                return false;
            },
        );
        if reflect::is_valid(index) {
            story.state.action = index;
        }
    }

    func execute_jump_to_chapter(action, story) {
        if map::contains_key(story.chapters, action.name) {
            story.state.chapter = action.name;
            story.state.action = 0;
        }
    }

    func execute_change_background(action, story, engine) {
        story.background_image = image::load(engine, action.asset);
    }

    func execute_show_character(action, story) {
        var character = story.characters{action.id};
        character.show = true;
        if reflect::is_valid(action.variant) {
            character.variant = action.variant;
        }
        if reflect::is_valid(action.position) {
            reflect::pack(character.position, action.position);
        }
    }

    func execute_hide_character(action, story) {
        story.characters{action.id}.show = false;
    }

    func execute_show_message(action, story) {
        story.dialogue = story::Dialogue {
            text: action.text,
            character: action.character,
        };
        if reflect::is_valid(action.options) {
            var iter = iter::build([
                array::iter(action.options, false),
                [<func iter::enumerate>],
                [<func iter::map>, @[](enumeration) {
                    var result = story::DialogueOption {
                        index: enumeration.index,
                    };
                    reflect::pack(result, enumeration.value);
                    return result;
                }],
            ]);
            return action::WaitForOption {
                options: array::collect(iter),
            };
        }
        return action::WaitForContinue {};
    }

    func execute_hide_message(action, story) {
        story.dialogue = null;
    }
}