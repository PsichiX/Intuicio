#!simpleton --stack-capacity 10240 --registers-capacity 10240

mod main {
    import "simpleton_window.plugin";
    import "simpleton_renderer.plugin";
    import "simpleton_ecs.plugin";
    import "simpleton_rtree.plugin";
    import "utils/main";
    import "game_states/main";
    import "resources/main";
    import "components/main";
    import "systems/main";

    func main(args) {
        fs::set_current_dir(simpleton::get_entry_dir());

        var window = window::new(window::WindowConfig {
            title: "Game",
            vsync: true,
            fps: 30,
        });
        var renderer = renderer::new(window::gl(window), null);
        
        var game_states = game_states::new();
        game_states::add(
            game_states,
            "MainMenu",
            <func main_menu::on_enter>,
            <func main_menu::on_exit>,
            <func main_menu::on_tick>,
        );
        game_states::add(
            game_states,
            "GameSession",
            <func game_session::on_enter>,
            <func game_session::on_exit>,
            <func game_session::on_tick>,
        );
        game_states::change(game_states, "MainMenu");

        var world = world::new();
        world::add_resource(world, time::new());
        world::add_resource(world, inputs::new());
        world::add_resource(world, spawner::new(1.0));
        world::add_resource(world, drawing::new(renderer));
        world::add_resource(world, render_buffer::RenderBuffer {});
        world::add_resource(world, rtree::Rtree {});
        world::add_resource(world, renderer);
        world::add_resource(world, game_states);

        event::bind(window::redraw_event(window), @[world](interface, delta_time) {
            main::on_redraw(interface, delta_time, world);
        });
        event::bind(window::input_event(window), @[world](interface, input) {
            main::on_input(interface, input, world);
        });
        window::run(window);
    }

    func on_redraw(interface, delta_time, world) {
        var time = world::resource(world, <struct time::Time>);
        var drawing = world::resource(world, <struct drawing::Drawing>);
        var renderer = world::resource(world, <struct renderer::Renderer>);
        var buffer = world::resource(world, <struct render_buffer::RenderBuffer>);
        var game_states = world::resource(world, <struct game_states::GameStates>);
        
        time.delta_time = delta_time;
        drawing.screen_width = window_interface::width(interface);
        drawing.screen_height = window_interface::height(interface);
        render_buffer::clear(buffer);
        game_states::tick(game_states, world, interface);
        renderer::render(
            renderer,
            buffer,
            drawing.screen_width,
            drawing.screen_height,
            null,
            transform::Transform {},
        );
        if game_states::is_done(game_states) {
            window_interface::exit(interface);
        }
    }

    func on_input(interface, input, world) {
        var inputs = world::resource(world, <struct inputs::Inputs>);

        if reflect::are_same(reflect::type_of(input), <struct window::KeyboardInput>) {
            if text::equals(input.keycode, "Escape") {
                window_interface::exit(interface);
            }
            inputs.button{input.keycode} = input.state;
        }
    }
}